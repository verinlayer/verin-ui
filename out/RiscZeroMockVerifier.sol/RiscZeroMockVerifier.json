{"abi":[{"type":"constructor","inputs":[{"name":"selector","type":"bytes4","internalType":"bytes4"}],"stateMutability":"nonpayable"},{"type":"function","name":"SELECTOR","inputs":[],"outputs":[{"name":"","type":"bytes4","internalType":"bytes4"}],"stateMutability":"view"},{"type":"function","name":"mockProve","inputs":[{"name":"claimDigest","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"tuple","internalType":"struct Receipt","components":[{"name":"seal","type":"bytes","internalType":"bytes"},{"name":"claimDigest","type":"bytes32","internalType":"bytes32"}]}],"stateMutability":"view"},{"type":"function","name":"mockProve","inputs":[{"name":"imageId","type":"bytes32","internalType":"bytes32"},{"name":"journalDigest","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"tuple","internalType":"struct Receipt","components":[{"name":"seal","type":"bytes","internalType":"bytes"},{"name":"claimDigest","type":"bytes32","internalType":"bytes32"}]}],"stateMutability":"view"},{"type":"function","name":"verify","inputs":[{"name":"seal","type":"bytes","internalType":"bytes"},{"name":"imageId","type":"bytes32","internalType":"bytes32"},{"name":"journalDigest","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"view"},{"type":"function","name":"verifyIntegrity","inputs":[{"name":"receipt","type":"tuple","internalType":"struct Receipt","components":[{"name":"seal","type":"bytes","internalType":"bytes"},{"name":"claimDigest","type":"bytes32","internalType":"bytes32"}]}],"outputs":[],"stateMutability":"view"},{"type":"error","name":"SelectorMismatch","inputs":[{"name":"received","type":"bytes4","internalType":"bytes4"},{"name":"expected","type":"bytes4","internalType":"bytes4"}]},{"type":"error","name":"VerificationFailed","inputs":[]}],"bytecode":{"object":"0x60a034607557601f6106e838819003918201601f19168301916001600160401b03831184841017607957808492602094604052833981010312607557516001600160e01b03198116810360755760805260405161065a908161008e82396080518181816101a60152818161028401526103040152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe60808060405260049081361015610014575f80fd5b5f3560e01c908163053c238d14610194575080631599ead5146101285780633a115bb11461010957806366cf0e4b146100c25763ab750e7514610055575f80fd5b346100be5760603660031901126100be57803567ffffffffffffffff918282116100be57366023830112156100be578101359182116100be5736602483830101116100be576100bc9160246100b56100b06044358335610400565b61052c565b92016102ed565b005b5f80fd5b50346100be5760403660031901126100be576100f96100f46100b0610105936100e961025d565b506024359035610400565b610276565b604051918291826101d6565b0390f35b50346100be5760203660031901126100be576100f96101059135610276565b50346100be576003196020368201126100be5781359167ffffffffffffffff918284116100be576040843603918201126100be578184013590602219018112156100be578301908101359182116100be576024019080360382136100be5760246100bc930135916102ed565b346100be575f3660031901126100be577f00000000000000000000000000000000000000000000000000000000000000006001600160e01b0319168152602090f35b60208060809381845280516040838601528051938491826060880152018686015e5f84840186015201516040830152601f01601f1916010190565b6040810190811067ffffffffffffffff82111761022d57604052565b634e487b7160e01b5f52604160045260245ffd5b60a0810190811067ffffffffffffffff82111761022d57604052565b6040519061026a82610211565b5f602083606081520152565b61027e61025d565b506040517f00000000000000000000000000000000000000000000000000000000000000006001600160e01b03191660208201526024808201839052815260608101919067ffffffffffffffff83118184101761022d57608090836040526102e584610211565b808452015290565b91906004928184116100be576001600160e01b03197f00000000000000000000000000000000000000000000000000000000000000008116908235168082036103e3575050600319820167ffffffffffffffff918282116103d05760405192601b8501601f19908116603f01168401908111848210176103bd57604052818352602083019336818301116100be575f9287601c93018637830101525190209060405160208101918252602081526103a381610211565b519020036103ae5750565b60405163439cc0cd60e01b8152fd5b604187634e487b7160e01b5f525260245ffd5b604186634e487b7160e01b5f525260245ffd5b604491869160405192632e2ce35360e21b84528301526024820152fd5b9060409081519161041083610241565b5f83525f60806020948286820152835161042981610211565b838152838782015284820152826060820152015280519161044983610211565b5f83525f8484015281519061045d82610211565b81528381015f8152845f600c85516b1c9a5cd8cc0b93dd5d1c1d5d60a21b815260025afa156105225784915f91825191519051855191858301938452868301526060820152600160f91b6080820152606281526104b981610241565b8451918291518091835e8101838152039060025afa15610519577fa3acc27117418996340b84e5a90f3ef4c49d22c79e44aad822ec9c313e1eb8e25f519382519561050387610241565b86528501528301525f6060830152608082015290565b513d5f823e3d90fd5b82513d5f823e3d90fd5b60409060205f601284517172697363302e52656365697074436c61696d60701b815260025afa1561061a575f516060820151918051602082015191856080820151910192835151936003851015610606576020905101519287519660208801968752888801526060870152608086015260a085015260ff60f81b809260f81b1660c085015260f81b1660c4830152600160fa1b60c883015260aa825260e0820182811067ffffffffffffffff82111761022d576020925f9282865281518091845e81018360e0820152039060025afa1561051957505f5190565b634e487b7160e01b5f52602160045260245ffd5b50513d5f823e3d90fdfea26469706673582212206c9fb2eb22390b1b5e8d9eeefcc43b18c02d539b1e1f6c237ef9254655d5131b64736f6c63430008190033","sourceMap":"1284:2538:51:-:0;;;;;;;;;;;;;-1:-1:-1;;1284:2538:51;;;;-1:-1:-1;;;;;1284:2538:51;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1284:2538:51;;;;;;2022:19;;1284:2538;;;;;;;;2022:19;1284:2538;;;;;;;;;;;;;;;;;-1:-1:-1;1284:2538:51;;;;;;-1:-1:-1;1284:2538:51;;;;;-1:-1:-1;1284:2538:51","linkReferences":{}},"deployedBytecode":{"object":"0x60808060405260049081361015610014575f80fd5b5f3560e01c908163053c238d14610194575080631599ead5146101285780633a115bb11461010957806366cf0e4b146100c25763ab750e7514610055575f80fd5b346100be5760603660031901126100be57803567ffffffffffffffff918282116100be57366023830112156100be578101359182116100be5736602483830101116100be576100bc9160246100b56100b06044358335610400565b61052c565b92016102ed565b005b5f80fd5b50346100be5760403660031901126100be576100f96100f46100b0610105936100e961025d565b506024359035610400565b610276565b604051918291826101d6565b0390f35b50346100be5760203660031901126100be576100f96101059135610276565b50346100be576003196020368201126100be5781359167ffffffffffffffff918284116100be576040843603918201126100be578184013590602219018112156100be578301908101359182116100be576024019080360382136100be5760246100bc930135916102ed565b346100be575f3660031901126100be577f00000000000000000000000000000000000000000000000000000000000000006001600160e01b0319168152602090f35b60208060809381845280516040838601528051938491826060880152018686015e5f84840186015201516040830152601f01601f1916010190565b6040810190811067ffffffffffffffff82111761022d57604052565b634e487b7160e01b5f52604160045260245ffd5b60a0810190811067ffffffffffffffff82111761022d57604052565b6040519061026a82610211565b5f602083606081520152565b61027e61025d565b506040517f00000000000000000000000000000000000000000000000000000000000000006001600160e01b03191660208201526024808201839052815260608101919067ffffffffffffffff83118184101761022d57608090836040526102e584610211565b808452015290565b91906004928184116100be576001600160e01b03197f00000000000000000000000000000000000000000000000000000000000000008116908235168082036103e3575050600319820167ffffffffffffffff918282116103d05760405192601b8501601f19908116603f01168401908111848210176103bd57604052818352602083019336818301116100be575f9287601c93018637830101525190209060405160208101918252602081526103a381610211565b519020036103ae5750565b60405163439cc0cd60e01b8152fd5b604187634e487b7160e01b5f525260245ffd5b604186634e487b7160e01b5f525260245ffd5b604491869160405192632e2ce35360e21b84528301526024820152fd5b9060409081519161041083610241565b5f83525f60806020948286820152835161042981610211565b838152838782015284820152826060820152015280519161044983610211565b5f83525f8484015281519061045d82610211565b81528381015f8152845f600c85516b1c9a5cd8cc0b93dd5d1c1d5d60a21b815260025afa156105225784915f91825191519051855191858301938452868301526060820152600160f91b6080820152606281526104b981610241565b8451918291518091835e8101838152039060025afa15610519577fa3acc27117418996340b84e5a90f3ef4c49d22c79e44aad822ec9c313e1eb8e25f519382519561050387610241565b86528501528301525f6060830152608082015290565b513d5f823e3d90fd5b82513d5f823e3d90fd5b60409060205f601284517172697363302e52656365697074436c61696d60701b815260025afa1561061a575f516060820151918051602082015191856080820151910192835151936003851015610606576020905101519287519660208801968752888801526060870152608086015260a085015260ff60f81b809260f81b1660c085015260f81b1660c4830152600160fa1b60c883015260aa825260e0820182811067ffffffffffffffff82111761022d576020925f9282865281518091845e81018360e0820152039060025afa1561051957505f5190565b634e487b7160e01b5f52602160045260245ffd5b50513d5f823e3d90fdfea26469706673582212206c9fb2eb22390b1b5e8d9eeefcc43b18c02d539b1e1f6c237ef9254655d5131b64736f6c63430008190033","sourceMap":"1284:2538:51:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1284:2538:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2214:51;1284:2538;;2214:51;:42;1284:2538;;;;2214:42;:::i;:::-;:51;:::i;:::-;1284:2538;;2214:51;:::i;:::-;1284:2538;;;;;;;;;;;;-1:-1:-1;;1284:2538:51;;;;3421:62;3431:51;:42;1284:2538;;;;:::i;:::-;;;;;;3431:42;:::i;:51::-;3421:62;:::i;:::-;1284:2538;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;1284:2538:51;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;1284:2538:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1284:2538:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;2421:19;;;1284:2538;2421:19;;:::i;1284:2538::-;;;;;;-1:-1:-1;;1284:2538:51;;;;1944:32;-1:-1:-1;;;;;;1284:2538:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1284:2538:51;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;-1:-1:-1;1284:2538:51;;;;;;;:::o;3658:162::-;1284:2538;;:::i;:::-;-1:-1:-1;1284:2538:51;;3777:8;-1:-1:-1;;;;;;1284:2538:51;3760:39;;;1284:2538;;;;;;;;3760:39;;1284:2538;;;;;;;;;;;;;;3752:61;1284:2538;;;;;;;:::i;:::-;;;;3752:61;1284:2538;3658:162;:::o;2566:659::-;;;2902:1;1284:2538;;;;;;-1:-1:-1;;;;;;2877:8:51;1284:2538;;;;;;2877:28;;;2873:132;;1284:2538;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1284:2538:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1284:2538:51;;;;;;;;;;;;3102:19;;1284:2538;;;;3135:29;;1284:2538;;;;3135:29;;;;;:::i;:::-;1284:2538;3125:40;;3102:63;3098:121;;2566:659;:::o;3098:121::-;1284:2538;;-1:-1:-1;;;3188:20:51;;;1284:2538;;;;;;;;;;;;;;;;;;-1:-1:-1;1284:2538:51;;;-1:-1:-1;1284:2538:51;2873:132;1284:2538;;;;;;2928:66;;;;;;;;1284:2538;;;;;2928:66;3596:329:45;;1284:2538:51;;;;;;;;:::i;:::-;-1:-1:-1;1284:2538:51;;-1:-1:-1;1284:2538:51;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;2853:66:45;;-1:-1:-1;3794:34:45;;;2853:66;1284:2538:51;;;;;;:::i;:::-;;;3866:33:45;;;-1:-1:-1;1284:2538:51;;;-1:-1:-1;1284:2538:51;;;-1:-1:-1;;;1284:2538:51;;7981:22:45;;;;;;;;-1:-1:-1;7981:22:45;;;2610:28;;;;1284:2538:51;;8117:225:45;;;;1284:2538:51;;;7981:22:45;;;1284:2538:51;;7981:22:45;;1284:2538:51;;2610:28:45;;1284:2538:51;7981:22:45;;2610:28;8117:225;;;;;;:::i;:::-;1284:2538:51;;;;;;;;;;;;;;;8097:255:45;;7981:22;8097:255;;;;;2853:66;-1:-1:-1;8097:255:45;1284:2538:51;;;;;;;:::i;:::-;;;3709:209:45;;1284:2538:51;3709:209:45;;1284:2538:51;-1:-1:-1;1284:2538:51;3709:209:45;;1284:2538:51;;3709:209:45;;1284:2538:51;3596:329:45;:::o;8097:255::-;1284:2538:51;;-1:-1:-1;1284:2538:51;;;;;7981:22:45;1284:2538:51;;;-1:-1:-1;1284:2538:51;;;;;3931:538:45;1284:2538:51;;2610:28:45;-1:-1:-1;1284:2538:51;;;-1:-1:-1;;;1284:2538:51;;2610:28:45;;;;;;-1:-1:-1;2610:28:45;4129:11;;;2610:28;;;;;4196:21;;2610:28;4235:12;;;;;2610:28;4296:14;;;;;2610:28;2853:66;;;;;;;2610:28;4349:14;;:19;2610:28;1284:2538:51;;;4043:409:45;2610:28;4043:409;;1284:2538:51;;;2610:28:45;;;1284:2538:51;4129:11:45;2610:28;;1284:2538:51;4235:12:45;2610:28;;1284:2538:51;2610:28:45;;;1284:2538:51;2610:28:45;;;;;;;;;;;;;;;;;;;1284:2538:51;2610:28:45;;;;;;4043:409;;;1284:2538:51;;;;;;;;;;;;2610:28:45;1284:2538:51;-1:-1:-1;1284:2538:51;;;;;;;;;;;;;;;;;4023:439:45;;2610:28;4023:439;;;;;;-1:-1:-1;4023:439:45;3931:538;:::o;2853:66::-;1284:2538:51;;;-1:-1:-1;2853:66:45;;;;;-1:-1:-1;2853:66:45;2610:28;1284:2538:51;;;-1:-1:-1;1284:2538:51;;;;","linkReferences":{},"immutableReferences":{"47665":[{"start":422,"length":32},{"start":644,"length":32},{"start":772,"length":32}]}},"methodIdentifiers":{"SELECTOR()":"053c238d","mockProve(bytes32)":"3a115bb1","mockProve(bytes32,bytes32)":"66cf0e4b","verify(bytes,bytes32,bytes32)":"ab750e75","verifyIntegrity((bytes,bytes32))":"1599ead5"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"received\",\"type\":\"bytes4\"},{\"internalType\":\"bytes4\",\"name\":\"expected\",\"type\":\"bytes4\"}],\"name\":\"SelectorMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VerificationFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"claimDigest\",\"type\":\"bytes32\"}],\"name\":\"mockProve\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"seal\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"claimDigest\",\"type\":\"bytes32\"}],\"internalType\":\"struct Receipt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"imageId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"journalDigest\",\"type\":\"bytes32\"}],\"name\":\"mockProve\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"seal\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"claimDigest\",\"type\":\"bytes32\"}],\"internalType\":\"struct Receipt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"seal\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"imageId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"journalDigest\",\"type\":\"bytes32\"}],\"name\":\"verify\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"seal\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"claimDigest\",\"type\":\"bytes32\"}],\"internalType\":\"struct Receipt\",\"name\":\"receipt\",\"type\":\"tuple\"}],\"name\":\"verifyIntegrity\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"mockProve(bytes32)\":{\"details\":\"You can calculate the claimDigest from a ReceiptClaim by using ReceiptClaimLib.\"},\"verify(bytes,bytes32,bytes32)\":{\"details\":\"This method additionally ensures that the input hash is all-zeros (i.e. no committed input), the exit code is (Halted, 0), and there are no assumptions (i.e. the receipt is unconditional).\",\"params\":{\"imageId\":\"The identifier for the guest program.\",\"journalDigest\":\"The SHA-256 digest of the journal bytes.\",\"seal\":\"The encoded cryptographic proof (i.e. SNARK).\"}},\"verifyIntegrity((bytes,bytes32))\":{\"params\":{\"receipt\":\"The receipt to be verified.\"}}},\"stateVariables\":{\"SELECTOR\":{\"details\":\"A selector is not intended to be collision resistant in the sense that it is possible      to find two preimages that result in the same selector. This is acceptable since its      purpose is to route a request among a set of trusted verifiers, and to make errors of      sending a receipt to a mismatching verifier easier to debug. It is analogous to the      ABI function selectors.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"SelectorMismatch(bytes4,bytes4)\":[{\"notice\":\"Error raised when this verifier receives a receipt with a selector that does not match         its own. The selector value is calculated from the verifier parameters, and so this         usually indicates a mismatch between the version of the prover and this verifier.\"}],\"VerificationFailed()\":[{\"notice\":\"Error raised when cryptographic verification of the zero-knowledge proof fails.\"}]},\"kind\":\"user\",\"methods\":{\"SELECTOR()\":{\"notice\":\"A short key attached to the seal to select the correct verifier implementation.\"},\"mockProve(bytes32)\":{\"notice\":\"Construct a mock receipt for the given claim digest.\"},\"mockProve(bytes32,bytes32)\":{\"notice\":\"Construct a mock receipt for the given image ID and journal.\"},\"verify(bytes,bytes32,bytes32)\":{\"notice\":\"Verify that the given seal is a valid RISC Zero proof of execution with the     given image ID and journal digest. Reverts on failure.\"},\"verifyIntegrity((bytes,bytes32))\":{\"notice\":\"Verify that the given receipt is a valid RISC Zero receipt, ensuring the `seal` is valid a cryptographic proof of the execution with the given `claim`. Reverts on failure.\"}},\"notice\":\"Mock verifier contract for RISC Zero receipts of execution.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"dependencies/risc0-ethereum-3.0.0/src/test/RiscZeroMockVerifier.sol\":\"RiscZeroMockVerifier\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin-contracts-5.0.1/=dependencies/@openzeppelin-contracts-5.0.1/\",\":erc4626-tests/=dependencies/risc0-ethereum/lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std-1.9.4/src/=dependencies/forge-std-1.9.4/src/\",\":forge-std/=dependencies/forge-std-1.9.4/src/\",\":halmos-cheatcodes/=dependencies/risc0-ethereum/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=dependencies/@openzeppelin-contracts-5.0.1/\",\":risc0-ethereum-3.0.0/=dependencies/risc0-ethereum-3.0.0/\",\":risc0-ethereum/=dependencies/risc0-ethereum/\",\":vlayer-0.1.0/=dependencies/vlayer-1.5.0/src/\",\":vlayer-1.5.0/=dependencies/vlayer-1.5.0/src/\"],\"viaIR\":true},\"sources\":{\"dependencies/risc0-ethereum-3.0.0/src/IRiscZeroVerifier.sol\":{\"keccak256\":\"0x3e74a4b2940b88837fb8399a0012b435d1d513a622d3ea3ba58088af9ad7e2fd\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://b06299cc68e3c79e4eb22705bb814ce816a7fd549e78614b318ae44d35e56f9b\",\"dweb:/ipfs/QmPpX5ciRdEH6MVRVt7qYQqy7B68qxG5v3mxkgYm3kGxi5\"]},\"dependencies/risc0-ethereum-3.0.0/src/Util.sol\":{\"keccak256\":\"0x230a9a58bb2b0c68d4921ecc3672783f941890a2fa3a238dbe5188cfb7658b82\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://586cb5296c564761609ca8aaae5b1fbbdb19ab1e174f7197f602572d9e82b70c\",\"dweb:/ipfs/QmWxDmucSfg3Wgdk1rVcheDHwkziTsXWvKpKSCnxtpQBqg\"]},\"dependencies/risc0-ethereum-3.0.0/src/test/RiscZeroMockVerifier.sol\":{\"keccak256\":\"0x1cca6f136a3839680805c8595756ac9f6cb1dc46aaf7740d4046c08b38e6e57d\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://b2c65b2cbfa03be5cddaaf4335195d16c0baa9775f1397826c4c7ebd75d6e14a\",\"dweb:/ipfs/QmQttnaUYxsWdVP65qH9ciR4tZ3a8sGRRNf7gaWKDc6B1A\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.25+commit.b61c2a91"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"bytes4","name":"selector","type":"bytes4"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"bytes4","name":"received","type":"bytes4"},{"internalType":"bytes4","name":"expected","type":"bytes4"}],"type":"error","name":"SelectorMismatch"},{"inputs":[],"type":"error","name":"VerificationFailed"},{"inputs":[],"stateMutability":"view","type":"function","name":"SELECTOR","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}]},{"inputs":[{"internalType":"bytes32","name":"claimDigest","type":"bytes32"}],"stateMutability":"view","type":"function","name":"mockProve","outputs":[{"internalType":"struct Receipt","name":"","type":"tuple","components":[{"internalType":"bytes","name":"seal","type":"bytes"},{"internalType":"bytes32","name":"claimDigest","type":"bytes32"}]}]},{"inputs":[{"internalType":"bytes32","name":"imageId","type":"bytes32"},{"internalType":"bytes32","name":"journalDigest","type":"bytes32"}],"stateMutability":"view","type":"function","name":"mockProve","outputs":[{"internalType":"struct Receipt","name":"","type":"tuple","components":[{"internalType":"bytes","name":"seal","type":"bytes"},{"internalType":"bytes32","name":"claimDigest","type":"bytes32"}]}]},{"inputs":[{"internalType":"bytes","name":"seal","type":"bytes"},{"internalType":"bytes32","name":"imageId","type":"bytes32"},{"internalType":"bytes32","name":"journalDigest","type":"bytes32"}],"stateMutability":"view","type":"function","name":"verify"},{"inputs":[{"internalType":"struct Receipt","name":"receipt","type":"tuple","components":[{"internalType":"bytes","name":"seal","type":"bytes"},{"internalType":"bytes32","name":"claimDigest","type":"bytes32"}]}],"stateMutability":"view","type":"function","name":"verifyIntegrity"}],"devdoc":{"kind":"dev","methods":{"mockProve(bytes32)":{"details":"You can calculate the claimDigest from a ReceiptClaim by using ReceiptClaimLib."},"verify(bytes,bytes32,bytes32)":{"details":"This method additionally ensures that the input hash is all-zeros (i.e. no committed input), the exit code is (Halted, 0), and there are no assumptions (i.e. the receipt is unconditional).","params":{"imageId":"The identifier for the guest program.","journalDigest":"The SHA-256 digest of the journal bytes.","seal":"The encoded cryptographic proof (i.e. SNARK)."}},"verifyIntegrity((bytes,bytes32))":{"params":{"receipt":"The receipt to be verified."}}},"version":1},"userdoc":{"kind":"user","methods":{"SELECTOR()":{"notice":"A short key attached to the seal to select the correct verifier implementation."},"mockProve(bytes32)":{"notice":"Construct a mock receipt for the given claim digest."},"mockProve(bytes32,bytes32)":{"notice":"Construct a mock receipt for the given image ID and journal."},"verify(bytes,bytes32,bytes32)":{"notice":"Verify that the given seal is a valid RISC Zero proof of execution with the     given image ID and journal digest. Reverts on failure."},"verifyIntegrity((bytes,bytes32))":{"notice":"Verify that the given receipt is a valid RISC Zero receipt, ensuring the `seal` is valid a cryptographic proof of the execution with the given `claim`. Reverts on failure."}},"version":1}},"settings":{"remappings":["@openzeppelin-contracts-5.0.1/=dependencies/@openzeppelin-contracts-5.0.1/","erc4626-tests/=dependencies/risc0-ethereum/lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std-1.9.4/src/=dependencies/forge-std-1.9.4/src/","forge-std/=dependencies/forge-std-1.9.4/src/","halmos-cheatcodes/=dependencies/risc0-ethereum/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=dependencies/@openzeppelin-contracts-5.0.1/","risc0-ethereum-3.0.0/=dependencies/risc0-ethereum-3.0.0/","risc0-ethereum/=dependencies/risc0-ethereum/","vlayer-0.1.0/=dependencies/vlayer-1.5.0/src/","vlayer-1.5.0/=dependencies/vlayer-1.5.0/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"dependencies/risc0-ethereum-3.0.0/src/test/RiscZeroMockVerifier.sol":"RiscZeroMockVerifier"},"evmVersion":"cancun","libraries":{},"viaIR":true},"sources":{"dependencies/risc0-ethereum-3.0.0/src/IRiscZeroVerifier.sol":{"keccak256":"0x3e74a4b2940b88837fb8399a0012b435d1d513a622d3ea3ba58088af9ad7e2fd","urls":["bzz-raw://b06299cc68e3c79e4eb22705bb814ce816a7fd549e78614b318ae44d35e56f9b","dweb:/ipfs/QmPpX5ciRdEH6MVRVt7qYQqy7B68qxG5v3mxkgYm3kGxi5"],"license":"Apache-2.0"},"dependencies/risc0-ethereum-3.0.0/src/Util.sol":{"keccak256":"0x230a9a58bb2b0c68d4921ecc3672783f941890a2fa3a238dbe5188cfb7658b82","urls":["bzz-raw://586cb5296c564761609ca8aaae5b1fbbdb19ab1e174f7197f602572d9e82b70c","dweb:/ipfs/QmWxDmucSfg3Wgdk1rVcheDHwkziTsXWvKpKSCnxtpQBqg"],"license":"Apache-2.0"},"dependencies/risc0-ethereum-3.0.0/src/test/RiscZeroMockVerifier.sol":{"keccak256":"0x1cca6f136a3839680805c8595756ac9f6cb1dc46aaf7740d4046c08b38e6e57d","urls":["bzz-raw://b2c65b2cbfa03be5cddaaf4335195d16c0baa9775f1397826c4c7ebd75d6e14a","dweb:/ipfs/QmQttnaUYxsWdVP65qH9ciR4tZ3a8sGRRNf7gaWKDc6B1A"],"license":"Apache-2.0"}},"version":1},"id":51}